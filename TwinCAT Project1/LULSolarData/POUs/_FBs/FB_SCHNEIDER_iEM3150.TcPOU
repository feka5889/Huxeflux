<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.3">
  <POU Name="FB_SCHNEIDER_iEM3150" Id="{fc437677-a0c7-4266-864e-42b4ff7c86aa}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_SCHNEIDER_iEM3150
VAR_INPUT
	bEnable:			BOOL;		(*Enable*)
	bySlaveAdr:			BYTE;		(*Slav Id*)
END_VAR
VAR_OUTPUT
	bBusy:					BOOL;		(*Upptagen med arbete*)
	bMbCommErr:				BOOL;		(*Modbus Komm. fel*)
	
	_rI1 				:REAL;			(*Ström i Ampere fas 1, adr 3000*)
	_rI2				:REAL;			(*Ström i Ampere fas 2, adr 3002*)
	_rI3				:REAL;			(*Ström i Ampere fas 3, adr 3004*)
	
	_rU_L1_L2			:REAL;			(*Spänning L1-L2 i Volt, adr 3020*)
	_rU_L2_L3			:REAL;			(*Spänning L2-L3 i Volt, adr 3022*)
	_rU_L3_L1			:REAL;			(*Spänning L3-L1 i Volt, adr 3024*)
										
	_rU_L1_N			:REAL;			(*Spänning L1-N i Volt, adr 3028*)
	_rU_L2_N			:REAL;			(*Spänning L2-N i Volt, adr 3030*)
	_rU_L3_N			:REAL;			(*Spänning L3-N i Volt, adr 3032*)
										
	_rP1				:REAL;			(*Effekt fas 1 i kW, adr 3054*)
	_rP2				:REAL;			(*Effekt fas 2 i kW, adr 3056*)
	_rP3				:REAL;			(*Effekt fas 3 i kW, adr 3058*)									
	_rPtot				:REAL;			(*Total aktiv effekt i kW, adr 3060*)
	_rPVAR				:REAL;			(*Total reaktiv effekt i kVAR, adr 3068*)
	_rPVA				:REAL;			(*Total apparent effekt i kVA, adr 3076*)
										
	_rPfa				:REAL;			(*Effektfaktor , adr 3084*)
										
	_rHZ				:REAL;			(*Frekvens , adr 3110*)
										
	_rWHAI				:REAL;			(*Total aktiv energi import i Wh, adr 45100*)
	_rWHAE				:REAL;			(*Total aktiv energi export i Wh, adr 45102*)
	_rVARHI				:REAL;			(*Total reaktiv energi import i VARh, adr 45104*)
	_rVARHE				:REAL;			(*Total reaktiv energi export i VARh, adr 45106*)
																			
	_rWHPAI			:REAL;			(*Partial aktiv energi import i Wh, adr 45108*)
	_rWHPAE			:REAL;			(*Partial reaktiv energi import i Wh, adr 45110*)
										
	_rWHAEI1			:REAL;			(*Aktiv energi import i Wh fas 1, adr 45112*)
	_rWHAEI2			:REAL;			(*Aktiv energi import i Wh fas 2, adr 45114*)
	_rWHAEI3			:REAL;			(*Aktiv energi import i Wh fas 3, adr 45116*)
																			
	
END_VAR
VAR
	fbRtuMaster:		ModbusRtuMaster_KL6x22B; 		(*Modbus master instans*)
	fbDelay:			TON;							(*Fördröjning mellan sekvenserna*)
	nStat:					INT := 0;					(*Sekvens*)
	stIEM_Data:ST_IEM3255;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nStat OF

0:(*Start steg*)
	IF bEnable THEN
		bMbCommErr := FALSE;
		bBusy := TRUE;
		nStat := 2;
	END_IF


2:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 6,
					MBAddr:= 2998 ,
					cbLength:= SIZEOF(stIEM_Data.stCurrent) ,
					pMemoryAddr:=  ADR(stIEM_Data.stCurrent),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 3;
END_IF


3:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 4;
END_IF;


4:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 6,
					MBAddr:= 3020 ,
					cbLength:= SIZEOF(stIEM_Data.stVolt) ,
					pMemoryAddr:=  ADR(stIEM_Data.stVolt),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 5;
END_IF


5:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100MS , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 6;
END_IF;

6:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 6,
					MBAddr:= 3028 ,
					cbLength:= SIZEOF(stIEM_Data.stVolt2) ,
					pMemoryAddr:=  ADR(stIEM_Data.stVolt2),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );


					
IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 7;
END_IF


7:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100MS , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 8;
END_IF;


8:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 8,
					MBAddr:= 3052 ,
					cbLength:= SIZEOF(stIEM_Data.stPower) ,
					pMemoryAddr:=  ADR(stIEM_Data.stPower),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 9;
END_IF


9:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 10;
END_IF;

10:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 10,
					MBAddr:= 3066 ,
					cbLength:= SIZEOF(stIEM_Data.stPower2) ,
					pMemoryAddr:=  ADR(stIEM_Data.stPower2),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 11;
END_IF


11:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 12;
END_IF;


12:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 2,
					MBAddr:= 3082 ,
					cbLength:= SIZEOF(stIEM_Data.stPowerFactor) ,
					pMemoryAddr:=  ADR(stIEM_Data.stPowerFactor),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 13;
END_IF


13:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 14;
END_IF;

14:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 2,
					MBAddr:= 3108 ,
					cbLength:= SIZEOF(stIEM_Data.stFrequency) ,
					pMemoryAddr:=  ADR(stIEM_Data.stFrequency),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 15;
END_IF


15:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 16;
END_IF;

16:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 8,
					MBAddr:= 45100 ,
					cbLength:= SIZEOF(stIEM_Data.stTotalEnergy) ,
					pMemoryAddr:=  ADR(stIEM_Data.stTotalEnergy),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 17;
END_IF


17:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 18;
END_IF;

18:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 4,
					MBAddr:= 45108 ,
					cbLength:= SIZEOF(stIEM_Data.stPartialEnergy) ,
					pMemoryAddr:=  ADR(stIEM_Data.stPartialEnergy),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 19;
END_IF


19:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 20;
END_IF;


20:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 21;
END_IF;

21:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 6,
					MBAddr:= 45110 ,
					cbLength:= SIZEOF(stIEM_Data.stPhaseEnergy) ,
					pMemoryAddr:=  ADR(stIEM_Data.stPhaseEnergy),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 22;
END_IF


22:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 23;
END_IF;


23:(*Modbus Funktion 3, Läs data från Holding Registers*)
fbRtuMaster.ReadRegs(
					UnitID:= bySlaveAdr ,
					Quantity:= 2,
					MBAddr:= 45011 ,
					cbLength:= SIZEOF(stIEM_Data.stAlarmValue) ,
					pMemoryAddr:=  ADR(stIEM_Data.stAlarmValue),
					Execute:= TRUE ,
					Timeout:= T#2s ,BUSY=> ,	Error=> , ErrorId=> ,cbRead=> );

IF fbRtuMaster.Error THEN
	nStat := 999;
ELSIF  NOT fbRtuMaster.BUSY AND NOT fbRtuMaster.Error THEN
	fbRtuMaster.ReadRegs(Execute := FALSE);
	nStat := 24;
END_IF


24:	(*Fördröj*)
fbDelay(IN:= TRUE, PT:=T#100ms , Q=> , ET=> );
IF fbDelay.Q THEN
	fbDelay(IN:= FALSE);
	nStat := 40;
END_IF;

40:(*Läsning klar*)
	(*Beräkna och visa på utgången*)
	_rI1:= 		STIEM_Data.stCurrent.Phase_1_current;
	_rI2:=		STIEM_Data.stCurrent.Phase_2_current;
	_rI3:=		STIEM_Data.stCurrent.Phase_3_current;	
	_rU_L1_L2:=	STIEM_Data.stVolt.Voltage_L1_L2;
	_rU_L2_L3:=	STIEM_Data.stVolt.Voltage_L2_L3;
	_rU_L3_L1:=	STIEM_Data.stVolt.Voltage_L3_L1;	
	_rU_L1_N:=	STIEM_Data.stVolt2.Voltage_L1_N;
	_rU_L2_N:=	STIEM_Data.stVolt2.Voltage_L2_N;
	_rU_L3_N:=	STIEM_Data.stVolt2.Voltage_L3_N;
	_rP1:=		STIEM_Data.stPower.Active_Power_Phase_1;
	_rP2:=		STIEM_Data.stPower.Active_Power_Phase_2;
	_rP3:=		STIEM_Data.stPower.Active_Power_Phase_3;
	_rPtot:=	STIEM_Data.stPower.Total_Active_Power;
	_rPVAR:=	STIEM_Data.stPower2.Total_Reactive_Power;
	_rPVA:=		STIEM_Data.stPower2.Total_Apparent_Power;
	_rPfa:=		STIEM_Data.stPowerFactor.Total_Power_Factor;
	_rHZ:=		STIEM_Data.stFrequency.Frequency;
	_rWHAI:=	STIEM_Data.stTotalEnergy.Total_Active_Energy_Import;
	_rWHAE:=	STIEM_Data.stTotalEnergy.Total_Active_Energy_Export;
	_rVARHI:=	STIEM_Data.stTotalEnergy.Total_Reactive_Energy_Import;
	_rVARHE:=	STIEM_Data.stTotalEnergy.Total_Reactive_Energy_Export;
	_rWHPAI:=	STIEM_Data.stPartialEnergy.Partial_Active_Energy_Import;
	_rWHPAE:=	STIEM_Data.stPartialEnergy.Partial_Reactive_Energy_Import;
	_rWHAEI1:=	STIEM_Data.stPhaseEnergy.Active_Energy_Import_Phase_1;
	_rWHAEI2:=	STIEM_Data.stPhaseEnergy.Active_Energy_Import_Phase_2;
	_rWHAEI3:=	STIEM_Data.stPhaseEnergy.Active_Energy_Import_Phase_3;
	
	nStat := 0;

999:(*Något blev fel*)
	fbRtuMaster.ReadRegs(Execute := FALSE);
	bMbCommErr:= TRUE;
	bBusy := FALSE;
	nStat := 0;
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="FB_SCHNEIDER_iEM3150">
      <LineId Id="3" Count="59" />
      <LineId Id="64" Count="9" />
      <LineId Id="393" Count="1" />
      <LineId Id="74" Count="254" />
      <LineId Id="330" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>